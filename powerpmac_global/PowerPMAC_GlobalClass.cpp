/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_GlobalClass.cpp
//
// description : C++ source for the PowerPMAC_GlobalClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the PowerPMAC_Global once per process.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerPMAC_GlobalClass.h>
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass.cpp

//-------------------------------------------------------------------
/**
 *	Create PowerPMAC_GlobalClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_PowerPMAC_Global_class(const char *name) {
		return PowerPMAC_Global_ns::PowerPMAC_GlobalClass::init(name);
	}
}

namespace PowerPMAC_Global_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
PowerPMAC_GlobalClass *PowerPMAC_GlobalClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::PowerPMAC_GlobalClass(string &s)
 * description : 	constructor for the PowerPMAC_GlobalClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
PowerPMAC_GlobalClass::PowerPMAC_GlobalClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering PowerPMAC_GlobalClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::constructor

	cout2 << "Leaving PowerPMAC_GlobalClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::~PowerPMAC_GlobalClass()
 * description : 	destructor for the PowerPMAC_GlobalClass
 */
//--------------------------------------------------------
PowerPMAC_GlobalClass::~PowerPMAC_GlobalClass()
{
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
PowerPMAC_GlobalClass *PowerPMAC_GlobalClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new PowerPMAC_GlobalClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
PowerPMAC_GlobalClass *PowerPMAC_GlobalClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ResetAmpClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetAmpClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetAmpClass::execute(): arrived" << endl;
	return insert((static_cast<PowerPMAC_Global *>(device))->reset_amp());
}

//--------------------------------------------------------
/**
 * method : 		ExecuteCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ExecuteCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ExecuteCommandClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<PowerPMAC_Global *>(device))->execute_command(argin));
}

//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetClass::execute(): arrived" << endl;
	((static_cast<PowerPMAC_Global *>(device))->reset());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RebootClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RebootClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "RebootClass::execute(): arrived" << endl;
	((static_cast<PowerPMAC_Global *>(device))->reboot());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum PowerPMAC_GlobalClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum PowerPMAC_GlobalClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum PowerPMAC_GlobalClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "host";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "port";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "loggingHost";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "loggingPort";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "dumpCommunication";
	prop_desc = "dump all communication to the power pmac, this is only a debugging helper";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new PowerPMAC_Global(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		PowerPMAC_Global *dev = static_cast<PowerPMAC_Global *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::attribute_factory_before
	//	Attribute : MaxMotors
	MaxMotorsAttrib	*maxmotors = new MaxMotorsAttrib();
	Tango::UserDefaultAttrProp	maxmotors_prop;
	//	description	not set for MaxMotors
	//	label	not set for MaxMotors
	maxmotors_prop.set_unit("motors");
	//	standard_unit	not set for MaxMotors
	//	display_unit	not set for MaxMotors
	//	format	not set for MaxMotors
	//	max_value	not set for MaxMotors
	//	min_value	not set for MaxMotors
	//	max_alarm	not set for MaxMotors
	//	min_alarm	not set for MaxMotors
	//	max_warning	not set for MaxMotors
	//	min_warning	not set for MaxMotors
	//	delta_t	not set for MaxMotors
	//	delta_val	not set for MaxMotors
	
	maxmotors->set_default_properties(maxmotors_prop);
	//	Not Polled
	maxmotors->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(maxmotors);

	//	Attribute : MaxCoords
	MaxCoordsAttrib	*maxcoords = new MaxCoordsAttrib();
	Tango::UserDefaultAttrProp	maxcoords_prop;
	//	description	not set for MaxCoords
	//	label	not set for MaxCoords
	maxcoords_prop.set_unit("coords");
	//	standard_unit	not set for MaxCoords
	//	display_unit	not set for MaxCoords
	//	format	not set for MaxCoords
	//	max_value	not set for MaxCoords
	//	min_value	not set for MaxCoords
	//	max_alarm	not set for MaxCoords
	//	min_alarm	not set for MaxCoords
	//	max_warning	not set for MaxCoords
	//	min_warning	not set for MaxCoords
	//	delta_t	not set for MaxCoords
	//	delta_val	not set for MaxCoords
	
	maxcoords->set_default_properties(maxcoords_prop);
	//	Not Polled
	maxcoords->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(maxcoords);

	//	Attribute : AbortAll
	AbortAllAttrib	*abortall = new AbortAllAttrib();
	Tango::UserDefaultAttrProp	abortall_prop;
	//	description	not set for AbortAll
	//	label	not set for AbortAll
	//	unit	not set for AbortAll
	//	standard_unit	not set for AbortAll
	//	display_unit	not set for AbortAll
	//	format	not set for AbortAll
	//	max_value	not set for AbortAll
	//	min_value	not set for AbortAll
	//	max_alarm	not set for AbortAll
	//	min_alarm	not set for AbortAll
	//	max_warning	not set for AbortAll
	//	min_warning	not set for AbortAll
	//	delta_t	not set for AbortAll
	//	delta_val	not set for AbortAll
	
	abortall->set_default_properties(abortall_prop);
	//	Not Polled
	abortall->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(abortall);

	//	Attribute : CpuTemp
	CpuTempAttrib	*cputemp = new CpuTempAttrib();
	Tango::UserDefaultAttrProp	cputemp_prop;
	//	description	not set for CpuTemp
	//	label	not set for CpuTemp
	cputemp_prop.set_unit("C");
	//	standard_unit	not set for CpuTemp
	//	display_unit	not set for CpuTemp
	//	format	not set for CpuTemp
	//	max_value	not set for CpuTemp
	//	min_value	not set for CpuTemp
	//	max_alarm	not set for CpuTemp
	//	min_alarm	not set for CpuTemp
	//	max_warning	not set for CpuTemp
	//	min_warning	not set for CpuTemp
	//	delta_t	not set for CpuTemp
	//	delta_val	not set for CpuTemp
	
	cputemp->set_default_properties(cputemp_prop);
	//	Not Polled
	cputemp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(cputemp);

	//	Attribute : AmpOverTemp
	AmpOverTempAttrib	*ampovertemp = new AmpOverTempAttrib();
	Tango::UserDefaultAttrProp	ampovertemp_prop;
	//	description	not set for AmpOverTemp
	//	label	not set for AmpOverTemp
	//	unit	not set for AmpOverTemp
	//	standard_unit	not set for AmpOverTemp
	//	display_unit	not set for AmpOverTemp
	//	format	not set for AmpOverTemp
	//	max_value	not set for AmpOverTemp
	//	min_value	not set for AmpOverTemp
	//	max_alarm	not set for AmpOverTemp
	//	min_alarm	not set for AmpOverTemp
	//	max_warning	not set for AmpOverTemp
	//	min_warning	not set for AmpOverTemp
	//	delta_t	not set for AmpOverTemp
	//	delta_val	not set for AmpOverTemp
	
	ampovertemp->set_default_properties(ampovertemp_prop);
	//	Not Polled
	ampovertemp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(ampovertemp);

	//	Attribute : Firmware
	FirmwareAttrib	*firmware = new FirmwareAttrib();
	Tango::UserDefaultAttrProp	firmware_prop;
	//	description	not set for Firmware
	//	label	not set for Firmware
	//	unit	not set for Firmware
	//	standard_unit	not set for Firmware
	//	display_unit	not set for Firmware
	//	format	not set for Firmware
	//	max_value	not set for Firmware
	//	min_value	not set for Firmware
	//	max_alarm	not set for Firmware
	//	min_alarm	not set for Firmware
	//	max_warning	not set for Firmware
	//	min_warning	not set for Firmware
	//	delta_t	not set for Firmware
	//	delta_val	not set for Firmware
	
	firmware->set_default_properties(firmware_prop);
	//	Not Polled
	firmware->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(firmware);

	//	Attribute : SystemType
	SystemTypeAttrib	*systemtype = new SystemTypeAttrib();
	Tango::UserDefaultAttrProp	systemtype_prop;
	//	description	not set for SystemType
	//	label	not set for SystemType
	//	unit	not set for SystemType
	//	standard_unit	not set for SystemType
	//	display_unit	not set for SystemType
	//	format	not set for SystemType
	//	max_value	not set for SystemType
	//	min_value	not set for SystemType
	//	max_alarm	not set for SystemType
	//	min_alarm	not set for SystemType
	//	max_warning	not set for SystemType
	//	min_warning	not set for SystemType
	//	delta_t	not set for SystemType
	//	delta_val	not set for SystemType
	
	systemtype->set_default_properties(systemtype_prop);
	//	Not Polled
	systemtype->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(systemtype);

	//	Attribute : CpuType
	CpuTypeAttrib	*cputype = new CpuTypeAttrib();
	Tango::UserDefaultAttrProp	cputype_prop;
	//	description	not set for CpuType
	//	label	not set for CpuType
	//	unit	not set for CpuType
	//	standard_unit	not set for CpuType
	//	display_unit	not set for CpuType
	//	format	not set for CpuType
	//	max_value	not set for CpuType
	//	min_value	not set for CpuType
	//	max_alarm	not set for CpuType
	//	min_alarm	not set for CpuType
	//	max_warning	not set for CpuType
	//	min_warning	not set for CpuType
	//	delta_t	not set for CpuType
	//	delta_val	not set for CpuType
	
	cputype->set_default_properties(cputype_prop);
	//	Not Polled
	cputype->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(cputype);

	//	Attribute : CpuFrequency
	CpuFrequencyAttrib	*cpufrequency = new CpuFrequencyAttrib();
	Tango::UserDefaultAttrProp	cpufrequency_prop;
	//	description	not set for CpuFrequency
	//	label	not set for CpuFrequency
	cpufrequency_prop.set_unit("mhz");
	//	standard_unit	not set for CpuFrequency
	//	display_unit	not set for CpuFrequency
	//	format	not set for CpuFrequency
	//	max_value	not set for CpuFrequency
	//	min_value	not set for CpuFrequency
	//	max_alarm	not set for CpuFrequency
	//	min_alarm	not set for CpuFrequency
	//	max_warning	not set for CpuFrequency
	//	min_warning	not set for CpuFrequency
	//	delta_t	not set for CpuFrequency
	//	delta_val	not set for CpuFrequency
	
	cpufrequency->set_default_properties(cpufrequency_prop);
	//	Not Polled
	cpufrequency->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(cpufrequency);

	//	Attribute : Uptime
	UptimeAttrib	*uptime = new UptimeAttrib();
	Tango::UserDefaultAttrProp	uptime_prop;
	//	description	not set for Uptime
	//	label	not set for Uptime
	//	unit	not set for Uptime
	//	standard_unit	not set for Uptime
	//	display_unit	not set for Uptime
	//	format	not set for Uptime
	//	max_value	not set for Uptime
	//	min_value	not set for Uptime
	//	max_alarm	not set for Uptime
	//	min_alarm	not set for Uptime
	//	max_warning	not set for Uptime
	//	min_warning	not set for Uptime
	//	delta_t	not set for Uptime
	//	delta_val	not set for Uptime
	
	uptime->set_default_properties(uptime_prop);
	//	Not Polled
	uptime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(uptime);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::pipe_factory_before
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::command_factory()
{
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::command_factory_before


	//	Command ResetAmp
	ResetAmpClass	*pResetAmpCmd =
		new ResetAmpClass("ResetAmp",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetAmpCmd);

	//	Command ExecuteCommand
	ExecuteCommandClass	*pExecuteCommandCmd =
		new ExecuteCommandClass("ExecuteCommand",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pExecuteCommandCmd);

	//	Command Reset
	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCmd);

	//	Command Reboot
	RebootClass	*pRebootCmd =
		new RebootClass("Reboot",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRebootCmd);

	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		PowerPMAC_GlobalClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void PowerPMAC_GlobalClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		PowerPMAC_Global *dev = static_cast<PowerPMAC_Global *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_GlobalClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *PowerPMAC_GlobalClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(PowerPMAC_GlobalClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_GlobalClass::Additional Methods
} //	namespace
