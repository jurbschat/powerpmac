/*----- PROTECTED REGION ID(PowerPMAC_Global.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_Global.cpp
//
// description : C++ source for the PowerPMAC_Global class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMAC_Global are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerPMAC_Global.h>
#include <PowerPMAC_GlobalClass.h>
#include "coreinterface.h"
#include "exception.h"
#include "tangoutil.h"

#include <unordered_map>

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global.cpp

/**
 *  PowerPMAC_Global class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace PowerPMAC_Global_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_Global::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::PowerPMAC_Global()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerPMAC_Global
 */
//--------------------------------------------------------
PowerPMAC_Global::PowerPMAC_Global(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::constructor_1
}
//--------------------------------------------------------
PowerPMAC_Global::PowerPMAC_Global(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::constructor_2
}
//--------------------------------------------------------
PowerPMAC_Global::PowerPMAC_Global(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMAC_Global::delete_device()
{
	DEBUG_STREAM << "PowerPMAC_Global::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Global::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMAC_Global::init_device()
{
	DEBUG_STREAM << "PowerPMAC_Global::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Global::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(PowerPMAC_Global::init_device) ENABLED START -----*/

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();

	// we set the power pmac address and start the automatic
	// connect/reconnect machinery.
	ci.Initialize(host, port);

	connectionEstablished = ci.GetSignal(ppmac::SignalType::ConnectionEstablished)->connect([this](){
		StartGlobal();
	});

	connectionLost = ci.GetSignal(ppmac::SignalType::ConnectionEstablished)->connect([this](){
		StopGlobal();
	});

	if(ci.IsConnected()) {
		StartGlobal();
	} else {
		set_state(Tango::OFF);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::init_device
}

void PowerPMAC_Global::StartGlobal() {

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto globalInfo = ci.GetGlobalInfo();

	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}

	set_state(Tango::ON);
}

void PowerPMAC_Global::StopGlobal() {
	set_state(Tango::OFF);
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerPMAC_Global::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("host"));
	dev_prop.push_back(Tango::DbDatum("port"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMAC_GlobalClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMAC_GlobalClass	*ds_class =
			(static_cast<PowerPMAC_GlobalClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize host from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  host;
		else {
			//	Try to initialize host from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  host;
		}
		//	And try to extract host value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  host;

		//	Try to initialize port from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  port;
		else {
			//	Try to initialize port from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  port;
		}
		//	And try to extract port value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

	}

	/*----- PROTECTED REGION ID(PowerPMAC_Global::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMAC_Global::always_executed_hook()
{
	DEBUG_STREAM << "PowerPMAC_Global::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Global::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerPMAC_Global::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_Global::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Global::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_Global::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Global::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_Global::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Global::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerPMAC_Global::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Global::namespace_ending
} //	namespace
