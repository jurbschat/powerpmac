/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_CompensationTable.cpp
//
// description : C++ source for the PowerPMAC_CompensationTable class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMAC_CompensationTable are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include "commandbuilder.h"
#include "pmac/defines.h"
#include "coreinterface.h"
#include "../tangoutil.h"
#include "../executehelper.h"
#include <fmt/format.h>
#include <PowerPMAC_CompensationTable.h>
#include <PowerPMAC_CompensationTableClass.h>
#include <cmath>
#include <boost/regex.hpp>

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable.cpp

/**
 *  PowerPMAC_CompensationTable class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  ResetTarget   |  reset_target
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  SourceMotor        |  Tango::DevLong	Scalar
//  TargetMotor        |  Tango::DevLong	Scalar
//  From               |  Tango::DevDouble	Scalar
//  To                 |  Tango::DevDouble	Scalar
//  CompensationTable  |  Tango::DevDouble	Spectrum  ( max = 100)
//================================================================

namespace PowerPMAC_CompensationTable_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::PowerPMAC_CompensationTable()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerPMAC_CompensationTable
 */
//--------------------------------------------------------
PowerPMAC_CompensationTable::PowerPMAC_CompensationTable(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::constructor_1
}
//--------------------------------------------------------
PowerPMAC_CompensationTable::PowerPMAC_CompensationTable(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::constructor_2
}
//--------------------------------------------------------
PowerPMAC_CompensationTable::PowerPMAC_CompensationTable(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::delete_device()
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::delete_device
	delete[] attr_SourceMotor_read;
	delete[] attr_TargetMotor_read;
	delete[] attr_From_read;
	delete[] attr_To_read;
	delete[] attr_CompensationTable_read;

	connectionEstablished.reset();
	connectionLost.reset();
	stateChanged.reset();
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::init_device()
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_SourceMotor_read = new Tango::DevLong[1];
	attr_TargetMotor_read = new Tango::DevLong[1];
	attr_From_read = new Tango::DevDouble[1];
	attr_To_read = new Tango::DevDouble[1];
	attr_CompensationTable_read = new Tango::DevDouble[100];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::init_device) ENABLED START -----*/

	tableID = ppmac::CompensationTableID(tableIndex);

	*attr_SourceMotor_read = 0;
	*attr_TargetMotor_read = 0;
	*attr_From_read = 0;
	*attr_To_read = 0;

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
	connectionEstablished = ci.Signals().ConnectionEstablished([this](){
		StartCompensationTables();
	});

	connectionLost = ci.Signals().ConnectionLost([this](){
		StopCompensationTables();
	});

	stateChanged = ci.Signals().CompTableChanged(tableID, [this](bool enable){
		if(enable) {
			StartCompensationTables();
		} else {
			StopCompensationTables();
		}
	});

	if(ci.IsConnected()) {
		StartCompensationTables();
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("TableIndex"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMAC_CompensationTableClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMAC_CompensationTableClass	*ds_class =
			(static_cast<PowerPMAC_CompensationTableClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize TableIndex from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  tableIndex;
		else {
			//	Try to initialize TableIndex from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  tableIndex;
		}
		//	And try to extract TableIndex value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  tableIndex;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

	}

	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::always_executed_hook()
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"PowerPMAC_CompensationTable::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute SourceMotor related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_SourceMotor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_SourceMotor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_SourceMotor) ENABLED START -----*/
	//	Set the attribute value
	//attr.set_value(attr_SourceMotor_read);

	try {
		int32_t source = tu::ExecuteCommand<int32_t>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetSource(tableID));
		attr.set_value(&source);
		//*attr_SourceMotor_read = source;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_SourceMotor
}
//--------------------------------------------------------
/**
 *	Write attribute SourceMotor related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_SourceMotor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_SourceMotor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_SourceMotor) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetSource(tableID, w_val));
		//*attr_SourceMotor_read = w_val;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_SourceMotor
}
//--------------------------------------------------------
/**
 *	Read attribute TargetMotor related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_TargetMotor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_TargetMotor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_TargetMotor) ENABLED START -----*/
	//	Set the attribute value
	//attr.set_value(attr_TargetMotor_read);

	try {
		int32_t target = GetTargetMotor();
		attr.set_value(&target);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_TargetMotor
}
//--------------------------------------------------------
/**
 *	Write attribute TargetMotor related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_TargetMotor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_TargetMotor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_TargetMotor) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetTarget(tableID, w_val));
		//*attr_TargetMotor_read = w_val;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_TargetMotor
}
//--------------------------------------------------------
/**
 *	Read attribute From related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_From(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_From(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_From) ENABLED START -----*/
	//	Set the attribute value
	//attr.set_value(attr_From_read);

	try {
		double startX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetStartX(tableID));
		attr.set_value(&startX);
		//*attr_From_read = startX;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_From
}
//--------------------------------------------------------
/**
 *	Write attribute From related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_From(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_From(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_From) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		double startX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetStartX(tableID));
		double deltaX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetDeltaX(tableID));
		auto to = startX + deltaX;
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetStartX(tableID, w_val));
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetDeltaX(tableID, to - w_val));
		//*attr_From_read = w_val;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_From
}
//--------------------------------------------------------
/**
 *	Read attribute To related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_To(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_To(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_To) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_To_read);

	try {
		double startX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetStartX(tableID));
		double deltaX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetDeltaX(tableID));
		double to = startX + deltaX;
		attr.set_value(&to);
		//*attr_To_read = to;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_To
}
//--------------------------------------------------------
/**
 *	Write attribute To related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_To(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_To(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_To) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		double startX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetStartX(tableID));
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetDeltaX(tableID, w_val - startX));
		//*attr_To_read = w_val;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_To
}
//--------------------------------------------------------
/**
 *	Read attribute CompensationTable related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 100
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::read_CompensationTable(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::read_CompensationTable(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::read_CompensationTable) ENABLED START -----*/
	//	Set the attribute value
	//attr.set_value(attr_CompensationTable_read, 100);

	compensationTable = GetTableFromPmac();
	attr.set_value(compensationTable.data(), compensationTable.size());
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::read_CompensationTable
}
//--------------------------------------------------------
/**
 *	Write attribute CompensationTable related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 100
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::write_CompensationTable(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::write_CompensationTable(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevDouble	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::write_CompensationTable) ENABLED START -----*/

	if(w_length == 0) {
		return;
	}

	compensationTable.clear();
	compensationTable.insert(compensationTable.end(), w_val, w_val + w_length);

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::CompensationTableSetData(tableID, compensationTable));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}

	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::write_CompensationTable
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command ResetTarget related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::reset_target()
{
	DEBUG_STREAM << "PowerPMAC_CompensationTable::ResetTarget()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::reset_target) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::CompensationTableResetTarget(tableID));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::reset_target
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_CompensationTable::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_CompensationTable::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::namespace_ending) ENABLED START -----*/

size_t PowerPMAC_CompensationTable::GetLastValidIndex(const double* array, int32_t length) {
	for (int32_t i = length - 1; i >= 0; i--) {
		if(array[i] != INFINITY) {
			return i;
		}
	}
	return 0;
}

void PowerPMAC_CompensationTable::WriteCompensationTable(const std::vector<double>& compTable,
		int32_t table,
		int32_t source,
		int32_t target,
		double from,
		double to)
{
	try {
		if(compensationTable.size() < 2) {
			fmt::print("compensation table size must be >= 2, unable to proceed\n");
			return;
		}
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto cmd = ppmac::cmd::CompensationTableSetAll(
			ppmac::CompensationTableID(table),
			ppmac::MotorID(source),
			ppmac::MotorID(target),
			from,
			to,
			compTable
		);
		ci.ExecuteCommand(cmd);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
}

std::vector<double> PowerPMAC_CompensationTable::GetTableFromPmac() {
	std::vector<double> out;
	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		for(int32_t idx = 0;/*empty*/;idx++) {
			auto valuesStr = ci.ExecuteCommand(ppmac::cmd::CompensationTableGetDataEntry(tableID, idx));
			auto value = tu::ParseDouble(valuesStr);
			if(std::isnan(value)) {
				break;
			}
			out.push_back(value);
		}
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	return out;
}

int32_t PowerPMAC_CompensationTable::GetTargetMotor() {
	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
	auto result = ci.ExecuteCommand(ppmac::cmd::CompensationTableGetTarget(tableID));
	boost::regex rgx(R"(Motor\[(\d+)\])");
	boost::smatch what;
	if(boost::regex_search(result, what, rgx)) {
		int32_t target = tu::ParseInt32(what[1]);
		return target;
	}
	return -1;
}

void PowerPMAC_CompensationTable::StartCompensationTables() {

	int32_t enabledCompTables = tu::ExecuteCommand<int32_t>(ppmac::GetCoreObject(), ppmac::cmd::GlobalGetActiveCompensationTableCount());
	if(enabledCompTables == 0) {
		set_state(Tango::OFF);
		set_status(fmt::format("compensation tables are disabled"));
		return;
	}
	if(tableIndex >= enabledCompTables) {
		set_state(Tango::OFF);
		set_status(fmt::format("table index is not inside enabled compensation table range of [0, {}]", enabledCompTables - 1));
		return;
	}
	//compensationTable = GetTableFromPmac();
	/*double startX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetStartX(tableID));
	double deltaX = tu::ExecuteCommand<double>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetDeltaX(tableID));
	int32_t source = tu::ExecuteCommand<int32_t>(ppmac::GetCoreObject(), ppmac::cmd::CompensationTableGetSource(tableID));
	int32_t target = GetTargetMotor();
	double to = startX + deltaX;
	*attr_SourceMotor_read = source;
	*attr_TargetMotor_read = target;
	*attr_From_read = startX;
	*attr_To_read = to;

	if(target < 0) {
		return;
	}

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
	// This initializes all "other" compensation table values to default values.
	// If its important to have a non standard compensation table it should not be
	// managed via tango.
	auto result = ci.ExecuteCommand(ppmac::cmd::CompensationTableSetAll(tableID,
		static_cast<ppmac::MotorID>(source),
		static_cast<ppmac::MotorID>(target),
		startX,
		to,
		compensationTable));*/
	set_status(Tango::StatusNotSet);
	set_state(Tango::ON);
}
void PowerPMAC_CompensationTable::StopCompensationTables() {
	set_state(Tango::OFF);
}

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::namespace_ending
} //	namespace
