/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_CompensationTable.h
//
// description : Include file for the PowerPMAC_CompensationTable class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PowerPMAC_CompensationTable_H
#define PowerPMAC_CompensationTable_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable.h

/**
 *  PowerPMAC_CompensationTable class description:
 *    
 */

namespace PowerPMAC_CompensationTable_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::Additional Class Declarations

class PowerPMAC_CompensationTable : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::Data Members

//	Device property data members
public:
	//	TableID:	The table id specifies the slot that this device server will use for its compensation table. 
	//  There are 256 slots but every slot takes computation time, therefore ids should be used 
	//  consecutive starting from 0 as we can only enable an amount of tables, not specific ids.
	//  E.g.: three device servers with the ids 0, 1 and 2 means we have to enable three tables,
	//  two device servers with the ids 5 and 7 means we have to enable 7 compensation 
	//  tables on the pmac.
	Tango::DevLong	tableID;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevLong	*attr_SourceMotor_read;
	Tango::DevLong	*attr_TargetMotor_read;
	Tango::DevDouble	*attr_From_read;
	Tango::DevDouble	*attr_To_read;
	Tango::DevDouble	*attr_CompensationTable_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMAC_CompensationTable(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMAC_CompensationTable(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PowerPMAC_CompensationTable(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~PowerPMAC_CompensationTable() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PowerPMAC_CompensationTable::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : PowerPMAC_CompensationTable::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute SourceMotor related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_SourceMotor(Tango::Attribute &attr);
	virtual void write_SourceMotor(Tango::WAttribute &attr);
	virtual bool is_SourceMotor_allowed(Tango::AttReqType type);
/**
 *	Attribute TargetMotor related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_TargetMotor(Tango::Attribute &attr);
	virtual void write_TargetMotor(Tango::WAttribute &attr);
	virtual bool is_TargetMotor_allowed(Tango::AttReqType type);
/**
 *	Attribute From related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_From(Tango::Attribute &attr);
	virtual void write_From(Tango::WAttribute &attr);
	virtual bool is_From_allowed(Tango::AttReqType type);
/**
 *	Attribute To related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_To(Tango::Attribute &attr);
	virtual void write_To(Tango::WAttribute &attr);
	virtual bool is_To_allowed(Tango::AttReqType type);
/**
 *	Attribute CompensationTable related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 100
 */
	virtual void read_CompensationTable(Tango::Attribute &attr);
	virtual void write_CompensationTable(Tango::WAttribute &attr);
	virtual bool is_CompensationTable_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PowerPMAC_CompensationTable::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : PowerPMAC_CompensationTable::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::Additional Method prototypes) ENABLED START -----*/

	size_t GetLastValidIndex(const double* array, int32_t length);

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PowerPMAC_CompensationTable::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CompensationTable::Additional Classes Definitions

}	//	End of namespace

#endif   //	PowerPMAC_CompensationTable_H
