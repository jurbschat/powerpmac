#=============================================================================
#
# file :        Makefile
#
# description : Makefile to generate a TANGO device server.
#
# project :     PowerPMAC
#
#=============================================================================
#                This file is generated by POGO
#        (Program Obviously used to Generate tango Object)
#=============================================================================
#
#
# MAKE_ENV is the path to find common environment to build project
#
#MAKE_ENV = $(TANGO_HOME)
MAKE_ENV = /usr/share/pogo/preferences
#$(info $$MAKE_ENV is [${MAKE_ENV}])

#=============================================================================
# PACKAGE_NAME is the name of the library/device/exe you want to build
#
PACKAGE_NAME = PowerPMAC
MAJOR_VERS   = 1
MINOR_VERS   = 0
RELEASE      = Release_$(MAJOR_VERS)_$(MINOR_VERS)

# #=============================================================================
# # RELEASE_TYPE
# # - DEBUG     : debug symbols - no optimization
# # - OPTIMIZED : no debug symbols - optimization level set to O2
# #-----------------------------------------------------------------------------
RELEASE_TYPE = DEBUG

#=============================================================================
# OUTPUT_TYPE can be one of the following :
#   - 'STATIC_LIB' for a static library (.a)
#   - 'SHARED_LIB' for a dynamic library (.so)
#   - 'DEVICE' for a device server (will automatically include and link
#            with Tango dependencies)
#   - 'SIMPLE_EXE' for an executable with no dependency (for exemple the test tool
#                of a library with no Tango dependencies)
#
OUTPUT_TYPE = DEVICE

#=============================================================================
# OUTPUT_DIR  is the directory which contains the build result.
# if not set, the standard location is :
#	- ./lib   if OUTPUT_TYPE is SHARED_LIB or STATIC_LIB
#	- ./bin for others
#
#OUTPUT_DIR =

#=============================================================================
# Tango Class list used by project
#
AXISCONTROLLER_CLASS = AxisController
AXISCONTROLLER_HOME  = ./axis_controller

BRICKLVAMP_CLASS = BrickLVAmp
BRICKLVAMP_HOME  = ./bricklv_amp


#=============================================================================
# INC_DIR_USER is the list of all include path needed by your sources
#   - for a device server, tango dependencies are automatically appended
#   - '-I ../include' and '-I .' are automatically appended in all cases
#
INC_DIR_USER= -I . \
              -I $(AXISCONTROLLER_HOME)\
              -I $(BRICKLVAMP_HOME)

#=============================================================================
# LIB_DIR_USER is the list of user library directories
#   - for a device server, tango libraries directories are automatically appended
#   - '-L ../lib' is automatically appended in all cases
#
LIB_DIR_USER=

#=============================================================================
# LFLAGS_USR is the list of user link flags
#   - for a device server, tango libraries directories are automatically appended
#   - '-ldl -lpthread' is automatically appended in all cases
#
# !!! ATTENTION !!!
# Be aware that the order matters. 
# For example if you must link with libA, and if libA depends itself on libB
# you must use '-lA -lB' in this order as link flags, otherwise you will get
# 'undefined reference' errors
#
#LFLAGS_USR+=


#=============================================================================
# CXXFLAGS_USR lists the compilation flags specific for your library/device/exe
# This is the place where to put your compile-time macros using '-Dmy_macro'
#
# -DACE_HAS_EXCEPTIONS -D__ACE_INLINE__ for ACE
#
#CXXFLAGS_USR+= -Wall


#=============================================================================
# TANGO_REQUIRED 
# - TRUE  : your project depends on TANGO
# - FALSE : your project does not depend on TANGO
#-----------------------------------------------------------------------------
# - NOTE : if PROJECT_TYPE is set to DEVICE, TANGO will be auto. added
#-----------------------------------------------------------------------------  
TANGO_REQUIRED = TRUE



#=============================================================================
#	include Standard TANGO compilation options
#
include $(MAKE_ENV)/tango.opt

#=============================================================================
#	POST_PROCESSING: action to be done after normal make.
#	e.g.:  change executable file name, .....
#POST_PROCESSING = \
#	mv bin/$(BIN_DIR)/$(PACKAGE_NAME) bin/$(BIN_DIR)/$(PACKAGE_NAME)_DS

#=============================================================================
# SVC_OBJS is the list of all objects needed to make the output
#
SVC_OBJS =  $(SVC_AXISCONTROLLER_OBJS) \
            $(SVC_BRICKLVAMP_OBJS) \
            $(OBJDIR)/MultiClassesFactory.o \
            $(OBJDIR)/main.o

#------------  Object files for AxisController class  ------------
SVC_AXISCONTROLLER_OBJS = \
		$(OBJDIR)/AxisController.o \
		$(OBJDIR)/AxisControllerClass.o \
		$(OBJDIR)/AxisControllerStateMachine.o

#------------  Object files for BrickLVAmp class  ------------
SVC_BRICKLVAMP_OBJS = \
		$(OBJDIR)/BrickLVAmp.o \
		$(OBJDIR)/BrickLVAmpClass.o \
		$(OBJDIR)/BrickLVAmpStateMachine.o


#=============================================================================
#	include common targets
#
include $(MAKE_ENV)/common_target.opt


#=============================================================================
# Following are dependancies of the classes used by project
#
#------------  Object files dependancies for AxisController class  ------------
AXISCONTROLLER_INCLUDES = \
		$(AXISCONTROLLER_HOME)/AxisController.h \
		$(AXISCONTROLLER_HOME)/AxisControllerClass.h

$(OBJDIR)/AxisController.o:  $(AXISCONTROLLER_HOME)/AxisController.cpp $(AXISCONTROLLER_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/AxisController.o
$(OBJDIR)/AxisControllerClass.o:  $(AXISCONTROLLER_HOME)/AxisControllerClass.cpp $(AXISCONTROLLER_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/AxisControllerClass.o
$(OBJDIR)/AxisControllerStateMachine.o:  $(AXISCONTROLLER_HOME)/AxisControllerStateMachine.cpp $(AXISCONTROLLER_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/AxisControllerStateMachine.o

#------------  Object files dependancies for BrickLVAmp class  ------------
BRICKLVAMP_INCLUDES = \
		$(BRICKLVAMP_HOME)/BrickLVAmp.h \
		$(BRICKLVAMP_HOME)/BrickLVAmpClass.h

$(OBJDIR)/BrickLVAmp.o:  $(BRICKLVAMP_HOME)/BrickLVAmp.cpp $(BRICKLVAMP_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/BrickLVAmp.o
$(OBJDIR)/BrickLVAmpClass.o:  $(BRICKLVAMP_HOME)/BrickLVAmpClass.cpp $(BRICKLVAMP_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/BrickLVAmpClass.o
$(OBJDIR)/BrickLVAmpStateMachine.o:  $(BRICKLVAMP_HOME)/BrickLVAmpStateMachine.cpp $(BRICKLVAMP_INCLUDES)
	$(CXX) $(CXXFLAGS) -c $< -o $(OBJDIR)/BrickLVAmpStateMachine.o
