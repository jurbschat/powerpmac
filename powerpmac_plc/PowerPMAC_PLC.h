/*----- PROTECTED REGION ID(PowerPMAC_PLC.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_PLC.h
//
// description : Include file for the PowerPMAC_PLC class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PowerPMAC_PLC_H
#define PowerPMAC_PLC_H

#include "libs/sigs.h"
#include "pmac/defines.h"
#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC.h

/**
 *  PowerPMAC_PLC class description:
 *    
 */

namespace PowerPMAC_PLC_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_PLC::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::Additional Class Declarations

class PowerPMAC_PLC : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PowerPMAC_PLC::Data Members) ENABLED START -----*/

	sigs::Connection connectionEstablished;
	sigs::Connection connectionLost;
	struct {
		bool running;
		bool active;
	} oldState;
	ppmac::PlcID plcId;

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::Data Members

//	Device property data members
public:
	//	PlcIndex:	The index of the plc clot, valid from 0..31
	Tango::DevLong	plcIndex;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevString	*attr_Name_read;
	Tango::DevLong	*attr_Id_read;
	Tango::DevBoolean	*attr_Active_read;
	Tango::DevBoolean	*attr_Running_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMAC_PLC(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMAC_PLC(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PowerPMAC_PLC(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~PowerPMAC_PLC() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PowerPMAC_PLC::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Name related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_Name(Tango::Attribute &attr);
	virtual bool is_Name_allowed(Tango::AttReqType type);
/**
 *	Attribute Id related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Id(Tango::Attribute &attr);
	virtual bool is_Id_allowed(Tango::AttReqType type);
/**
 *	Attribute Active related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_Active(Tango::Attribute &attr);
	virtual bool is_Active_allowed(Tango::AttReqType type);
/**
 *	Attribute Running related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_Running(Tango::Attribute &attr);
	virtual bool is_Running_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PowerPMAC_PLC::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Enable related method
	 *	Description: 
	 *
	 */
	virtual void enable();
	virtual bool is_Enable_allowed(const CORBA::Any &any);
	/**
	 *	Command Disable related method
	 *	Description: 
	 *
	 */
	virtual void disable();
	virtual bool is_Disable_allowed(const CORBA::Any &any);
	/**
	 *	Command Pause related method
	 *	Description: 
	 *
	 */
	virtual void pause();
	virtual bool is_Pause_allowed(const CORBA::Any &any);
	/**
	 *	Command Resume related method
	 *	Description: 
	 *
	 */
	virtual void resume();
	virtual bool is_Resume_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : PowerPMAC_PLC::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(PowerPMAC_PLC::Additional Method prototypes) ENABLED START -----*/

	void StartPLC();
	void StopPLC();
	void PollNewState();
	void UpdateState();

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PowerPMAC_PLC::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::Additional Classes Definitions

}	//	End of namespace

#endif   //	PowerPMAC_PLC_H
