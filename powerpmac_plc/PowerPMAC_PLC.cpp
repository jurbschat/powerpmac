/*----- PROTECTED REGION ID(PowerPMAC_PLC.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_PLC.cpp
//
// description : C++ source for the PowerPMAC_PLC class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMAC_PLC are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include "coreinterface.h"
#include "../tangoutil.h"
#include "commandbuilder.h"
#include "PowerPMAC_PLC.h"
#include <PowerPMAC_PLC.h>
#include <PowerPMAC_PLCClass.h>

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC.cpp

/**
 *  PowerPMAC_PLC class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Enable        |  enable
//  Disable       |  disable
//  Pause         |  pause
//  Resume        |  resume
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Name     |  Tango::DevString	Scalar
//  Id       |  Tango::DevLong	Scalar
//  Active   |  Tango::DevBoolean	Scalar
//  Running  |  Tango::DevBoolean	Scalar
//================================================================

namespace PowerPMAC_PLC_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_PLC::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::PowerPMAC_PLC()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerPMAC_PLC
 */
//--------------------------------------------------------
PowerPMAC_PLC::PowerPMAC_PLC(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::constructor_1
}
//--------------------------------------------------------
PowerPMAC_PLC::PowerPMAC_PLC(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::constructor_2
}
//--------------------------------------------------------
PowerPMAC_PLC::PowerPMAC_PLC(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMAC_PLC::delete_device()
{
	DEBUG_STREAM << "PowerPMAC_PLC::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	StopPLC();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::delete_device
	delete[] attr_Name_read;
	delete[] attr_Id_read;
	delete[] attr_Active_read;
	delete[] attr_Running_read;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMAC_PLC::init_device()
{
	DEBUG_STREAM << "PowerPMAC_PLC::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Name_read = new Tango::DevString[1];
	attr_Id_read = new Tango::DevLong[1];
	attr_Active_read = new Tango::DevBoolean[1];
	attr_Running_read = new Tango::DevBoolean[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(PowerPMAC_PLC::init_device) ENABLED START -----*/

	*attr_Name_read = nullptr;
	*attr_Id_read = -1;
	*attr_Active_read = false;
	*attr_Running_read = false;

	tu::SetStringValue(attr_Name_read, "not implemented");

	plcId = ppmac::PlcID(plcIndex);

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();

	connectionEstablished = ci.Signals().ConnectionEstablished([this](){
		StartPLC();
	});

	connectionLost = ci.Signals().ConnectionLost([this](){
		StopPLC();
	});

	if(ci.IsConnected()) {
		StartPLC();
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerPMAC_PLC::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("PlcIndex"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMAC_PLCClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMAC_PLCClass	*ds_class =
			(static_cast<PowerPMAC_PLCClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize PlcIndex from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  plcIndex;
		else {
			//	Try to initialize PlcIndex from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  plcIndex;
		}
		//	And try to extract PlcIndex value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  plcIndex;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

	}

	/*----- PROTECTED REGION ID(PowerPMAC_PLC::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void PowerPMAC_PLC::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(PowerPMAC_PLC::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMAC_PLC::always_executed_hook()
{
	DEBUG_STREAM << "PowerPMAC_PLC::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"PowerPMAC_PLC::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerPMAC_PLC::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_PLC::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Name related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_PLC::read_Name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_PLC::read_Name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::read_Name) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Name_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::read_Name
}
//--------------------------------------------------------
/**
 *	Read attribute Id related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_PLC::read_Id(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_PLC::read_Id(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::read_Id) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Id_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::read_Id
}
//--------------------------------------------------------
/**
 *	Read attribute Active related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_PLC::read_Active(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_PLC::read_Active(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::read_Active) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Active_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::read_Active
}
//--------------------------------------------------------
/**
 *	Read attribute Running related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_PLC::read_Running(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_PLC::read_Running(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::read_Running) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Running_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::read_Running
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_PLC::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Enable related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_PLC::enable()
{
	DEBUG_STREAM << "PowerPMAC_PLC::Enable()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::enable) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::SetPLCActice(plcId));
		PollNewState();
		UpdateState();
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::enable
}
//--------------------------------------------------------
/**
 *	Command Disable related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_PLC::disable()
{
	DEBUG_STREAM << "PowerPMAC_PLC::Disable()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::disable) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::SetPLCDeactive(plcId));
		PollNewState();
		UpdateState();
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::disable
}
//--------------------------------------------------------
/**
 *	Command Pause related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_PLC::pause()
{
	DEBUG_STREAM << "PowerPMAC_PLC::Pause()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::pause) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::SetPlcPause(plcId));
		PollNewState();
		UpdateState();
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::pause
}
//--------------------------------------------------------
/**
 *	Command Resume related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_PLC::resume()
{
	DEBUG_STREAM << "PowerPMAC_PLC::Resume()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::resume) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::SetPlcRunning(plcId));
		PollNewState();
		UpdateState();
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::resume
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_PLC::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_PLC::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerPMAC_PLC::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerPMAC_PLC::namespace_ending) ENABLED START -----*/

void PowerPMAC_PLC::StartPLC() {
	set_state(Tango::ON);
	PollNewState();
	UpdateState();
}

void PowerPMAC_PLC::StopPLC() {
	set_state(Tango::FAULT);
}

void PowerPMAC_PLC::PollNewState() {
	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
	std::string activeResult = ci.ExecuteCommand(ppmac::cmd::GetPlcActive(plcId));
	bool activeValue = tu::ParseInt32(activeResult) != 0;
	std::string runningResult = ci.ExecuteCommand(ppmac::cmd::GetPlcRunning(plcId));
	bool runningValue = tu::ParseInt32(runningResult) != 0;
	*attr_Running_read = runningValue;
	*attr_Active_read = activeValue;
}

void PowerPMAC_PLC::UpdateState() {
	if(get_state() == Tango::FAULT) {
		return;
	}
	if(*attr_Active_read) {
		if(*attr_Running_read) {
			set_state(Tango::ON);
		} else {
			set_state(Tango::STANDBY);
		}
	} else {
		set_state(Tango::OFF);
	}
}

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_PLC::namespace_ending
} //	namespace
