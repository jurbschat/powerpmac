/*----- PROTECTED REGION ID(PowerPMAC_MotorStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_MotorStateMachine.cpp
//
// description : State machine file for the PowerPMAC_Motor class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <PowerPMAC_Motor.h>

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::PowerPMAC_MotorStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  
//  OFF      |  
//  INIT     |  
//  MOVING   |  
//  FAULT    |  
//  DISABLE  |  


namespace PowerPMAC_Motor_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Position_allowed()
 *	Description : Execution allowed for Position attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Position_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF ||
			get_state()==Tango::INIT ||
			get_state()==Tango::MOVING ||
			get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::PositionStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::PositionStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::PositionStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::PositionStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Acceleration_allowed()
 *	Description : Execution allowed for Acceleration attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Acceleration_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF ||
			get_state()==Tango::INIT ||
			get_state()==Tango::MOVING ||
			get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::AccelerationStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::AccelerationStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::AccelerationStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::AccelerationStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Velocity_allowed()
 *	Description : Execution allowed for Velocity attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Velocity_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF ||
			get_state()==Tango::INIT ||
			get_state()==Tango::MOVING ||
			get_state()==Tango::FAULT)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::VelocityStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::VelocityStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::VelocityStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::VelocityStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_HomeOffset_allowed()
 *	Description : Execution allowed for HomeOffset attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_HomeOffset_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for HomeOffset attribute in Write access.
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::HomeOffsetStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::HomeOffsetStateAllowed_WRITE

	//	Not any excluded states for HomeOffset attribute in read access.
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::HomeOffsetStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::HomeOffsetStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_SoftCwLimit_allowed()
 *	Description : Execution allowed for SoftCwLimit attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_SoftCwLimit_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCwLimitStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCwLimitStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCwLimitStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCwLimitStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_SoftCcwLimit_allowed()
 *	Description : Execution allowed for SoftCcwLimit attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_SoftCcwLimit_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCcwLimitStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCcwLimitStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCcwLimitStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCcwLimitStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_SoftLimitEnable_allowed()
 *	Description : Execution allowed for SoftLimitEnable attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_SoftLimitEnable_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftLimitEnableStateAllowed_WRITE) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftLimitEnableStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftLimitEnableStateAllowed_READ) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftLimitEnableStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_SoftCwLimitFault_allowed()
 *	Description : Execution allowed for SoftCwLimitFault attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_SoftCwLimitFault_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCwLimitFaultStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCwLimitFaultStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_SoftCcwLimitFault_allowed()
 *	Description : Execution allowed for SoftCcwLimitFault attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_SoftCcwLimitFault_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::SoftCcwLimitFaultStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::SoftCcwLimitFaultStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_CwLimitFault_allowed()
 *	Description : Execution allowed for CwLimitFault attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_CwLimitFault_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::CwLimitFaultStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::CwLimitFaultStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_CcwLimitFault_allowed()
 *	Description : Execution allowed for CcwLimitFault attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_CcwLimitFault_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::OFF)
		{
		/*----- PROTECTED REGION ID(PowerPMAC_Motor::CcwLimitFaultStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::CcwLimitFaultStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Phase_allowed()
 *	Description : Execution allowed for Phase attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Phase_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::INIT ||
		get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::DISABLE)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::PhaseStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::PhaseStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Home_allowed()
 *	Description : Execution allowed for Home attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Home_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::INIT ||
		get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::DISABLE)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::HomeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::HomeStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Calibrate_allowed()
 *	Description : Execution allowed for Calibrate attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Calibrate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::INIT ||
		get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::DISABLE)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::CalibrateStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::CalibrateStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Enable_allowed()
 *	Description : Execution allowed for Enable attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Enable_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::ON ||
		get_state()==Tango::INIT ||
		get_state()==Tango::MOVING ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::DISABLE)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::EnableStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::EnableStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Disable_allowed()
 *	Description : Execution allowed for Disable attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Disable_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::DisableStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::DisableStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Stop_allowed()
 *	Description : Execution allowed for Stop attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Stop_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Compare device state with not allowed states.
	if (get_state()==Tango::OFF ||
		get_state()==Tango::FAULT ||
		get_state()==Tango::DISABLE)
	{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::StopStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::StopStateAllowed
		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::is_Kill_allowed()
 *	Description : Execution allowed for Kill attribute
 */
//--------------------------------------------------------
bool PowerPMAC_Motor::is_Kill_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Kill command.
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::KillStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::KillStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(PowerPMAC_Motor::PowerPMAC_MotorStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::PowerPMAC_MotorStateAllowed.AdditionalMethods

}	//	End of namespace
