/*----- PROTECTED REGION ID(PowerPMAC_Motor.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_Motor.cpp
//
// description : C++ source for the PowerPMAC_Motor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMAC_Motor are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerPMAC_Motor.h>
#include <PowerPMAC_MotorClass.h>
#include <pmac/datastructures.h>

#include "coreinterface.h"
#include "commandbuilder.h"
#include "tangoutil.h"

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor.cpp

/**
 *  PowerPMAC_Motor class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  PhaseMotor    |  phase_motor
//  HomeMotor     |  home_motor
//  Calibrate     |  calibrate
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Position           |  Tango::DevFloat	Scalar
//  Acceleration       |  Tango::DevFloat	Scalar
//  Velocity           |  Tango::DevFloat	Scalar
//  SoftCwLimit        |  Tango::DevFloat	Scalar
//  SoftCcwLimit       |  Tango::DevFloat	Scalar
//  EnableSoftLimit    |  Tango::DevBoolean	Scalar
//  SoftCwLimitFault   |  Tango::DevBoolean	Scalar
//  SoftCcwLimitFault  |  Tango::DevBoolean	Scalar
//  CwLimitFault       |  Tango::DevBoolean	Scalar
//  CcwLimitFault      |  Tango::DevBoolean	Scalar
//================================================================

namespace PowerPMAC_Motor_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_Motor::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::PowerPMAC_Motor()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerPMAC_Motor
 */
//--------------------------------------------------------
PowerPMAC_Motor::PowerPMAC_Motor(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::constructor_1
}
//--------------------------------------------------------
PowerPMAC_Motor::PowerPMAC_Motor(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::constructor_2
}
//--------------------------------------------------------
PowerPMAC_Motor::PowerPMAC_Motor(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMAC_Motor::delete_device()
{
	DEBUG_STREAM << "PowerPMAC_Motor::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::delete_device
	delete[] attr_Acceleration_read;
	delete[] attr_Velocity_read;
	delete[] attr_SoftCwLimit_read;
	delete[] attr_SoftCcwLimit_read;
	delete[] attr_EnableSoftLimit_read;
	delete[] attr_SoftCwLimitFault_read;
	delete[] attr_SoftCcwLimitFault_read;
	delete[] attr_CwLimitFault_read;
	delete[] attr_CcwLimitFault_read;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMAC_Motor::init_device()
{
	DEBUG_STREAM << "PowerPMAC_Motor::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Acceleration_read = new Tango::DevFloat[1];
	attr_Velocity_read = new Tango::DevFloat[1];
	attr_SoftCwLimit_read = new Tango::DevFloat[1];
	attr_SoftCcwLimit_read = new Tango::DevFloat[1];
	attr_EnableSoftLimit_read = new Tango::DevBoolean[1];
	attr_SoftCwLimitFault_read = new Tango::DevBoolean[1];
	attr_SoftCcwLimitFault_read = new Tango::DevBoolean[1];
	attr_CwLimitFault_read = new Tango::DevBoolean[1];
	attr_CcwLimitFault_read = new Tango::DevBoolean[1];
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::init_device) ENABLED START -----*/
	
	//	Initialize device

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();

	connectionEstablished = ci.GetSignal(ppmac::SignalType::ConnectionEstablished)->connect([this](){
		StartMotor();
	});

	connectionLost = ci.GetSignal(ppmac::SignalType::ConnectionLost)->connect([this](){
		StopMotor();
	});

	motorStateChanged = ci.GetSignal(ppmac::SignalType::MotorStateChanged)->connect([this](){
		MotorStateChanged();
	});

	if(ci.IsConnected()) {
		StartMotor();
	} else {
		set_state(Tango::OFF);
	}

	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::init_device
}

void PowerPMAC_Motor::StartMotor()
{
	if(disableHardLimits == true) {
		ppmac::cmd::MotorSetHardLimits(0, motorId);
	}

	set_state(Tango::ON);
}

void PowerPMAC_Motor::StopMotor()
{
	set_state(Tango::OFF);
}

void PowerPMAC_Motor::MotorStateChanged()
{
	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		uint64_t state = ci.GetMotorInfo(motorId).status.registerValue;
		// TODO: what?
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerPMAC_Motor::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("MotorIndex"));
	dev_prop.push_back(Tango::DbDatum("DisableHardLimits"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMAC_MotorClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMAC_MotorClass	*ds_class =
			(static_cast<PowerPMAC_MotorClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize MotorIndex from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  motorIndex;
		else {
			//	Try to initialize MotorIndex from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  motorIndex;
		}
		//	And try to extract MotorIndex value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  motorIndex;

		//	Try to initialize DisableHardLimits from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  disableHardLimits;
		else {
			//	Try to initialize DisableHardLimits from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  disableHardLimits;
		}
		//	And try to extract DisableHardLimits value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  disableHardLimits;

	}

	/*----- PROTECTED REGION ID(PowerPMAC_Motor::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	motorId = static_cast<ppmac::MotorID::TYPE>(motorIndex);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMAC_Motor::always_executed_hook()
{
	DEBUG_STREAM << "PowerPMAC_Motor::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_Position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_Position) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto pos = ci.GetMotorInfo(motorId).position;
		attr.set_value(&pos);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_Position
}
//--------------------------------------------------------
/**
 *	Write attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_Position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_Position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_Position) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto cmd = ppmac::cmd::MotorJogToPosition(w_val, motorId);
		ci.ExecuteCommand(cmd);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_Position
}
//--------------------------------------------------------
/**
 *	Read attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_Acceleration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_Acceleration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_Acceleration) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Acceleration_read);

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto acc = ci.GetMotorInfo(motorId).acceleration;
		attr.set_value(&acc);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_Acceleration
}
//--------------------------------------------------------
/**
 *	Write attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_Acceleration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_Acceleration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_Acceleration) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto cmd = ppmac::cmd::MotorSetJogAcceleration(w_val, motorId);
		ci.ExecuteCommand(cmd);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_Acceleration
}
//--------------------------------------------------------
/**
 *	Read attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_Velocity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_Velocity(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_Velocity) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto vel = ci.GetMotorInfo(motorId).velocity;
		attr.set_value(&vel);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_Velocity
}
//--------------------------------------------------------
/**
 *	Write attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_Velocity(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_Velocity(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_Velocity) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		auto cmd = ppmac::cmd::MotorSetJogSpeed(w_val, motorId);
		ci.ExecuteCommand(cmd);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_Velocity
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_SoftCwLimit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_SoftCwLimit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_SoftCwLimit) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftCwLimit_read);

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		std::string result = ci.ExecuteCommand(ppmac::cmd::MotorGetSoftlimitMinus(motorId));
		float limit = tu::ParseFloat(result);
		attr.set_value(&limit);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_SoftCwLimit
}
//--------------------------------------------------------
/**
 *	Write attribute SoftCwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_SoftCwLimit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_SoftCwLimit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_SoftCwLimit) ENABLED START -----*/

	if(*attr_EnableSoftLimit_read) {
		try {
			ppmac::CoreInterface& ci = ppmac::GetCoreObject();
			std::string result = ci.ExecuteCommand(ppmac::cmd::MotorSetSoftlimitMinus(w_val, motorId));
			float limit = tu::ParseFloat(result);
			attr.set_value(&limit);
		} catch (ppmac::RuntimeError& e) {
			tu::TranslateException(e);
		}
	}
	
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_SoftCwLimit
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCcwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_SoftCcwLimit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_SoftCcwLimit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_SoftCcwLimit) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftCcwLimit_read);

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::MotorGetSoftlimitPlus(motorId));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_SoftCcwLimit
}
//--------------------------------------------------------
/**
 *	Write attribute SoftCcwLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_SoftCcwLimit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_SoftCcwLimit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_SoftCcwLimit) ENABLED START -----*/

	if(*attr_EnableSoftLimit_read) {
		try {
			ppmac::CoreInterface& ci = ppmac::GetCoreObject();
			ci.ExecuteCommand(ppmac::cmd::MotorSetSoftlimitPlus(w_val, motorId));
		} catch (ppmac::RuntimeError& e) {
			tu::TranslateException(e);
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_SoftCcwLimit
}
//--------------------------------------------------------
/**
 *	Read attribute EnableSoftLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_EnableSoftLimit(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_EnableSoftLimit(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_EnableSoftLimit) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_EnableSoftLimit_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_EnableSoftLimit
}
//--------------------------------------------------------
/**
 *	Write attribute EnableSoftLimit related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::write_EnableSoftLimit(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::write_EnableSoftLimit(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::write_EnableSoftLimit) ENABLED START -----*/

	*attr_EnableSoftLimit_read = w_val;

	try {
		if(w_val == true) {
			ppmac::CoreInterface& ci = ppmac::GetCoreObject();
			ci.ExecuteCommand(ppmac::cmd::MotorSetSoftlimitMinus(*attr_SoftCwLimit_read, motorId));
			ci.ExecuteCommand(ppmac::cmd::MotorSetSoftlimitPlus(*attr_SoftCcwLimit_read, motorId));
		}
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::write_EnableSoftLimit
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_SoftCwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_SoftCwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_SoftCwLimitFault) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		bool onLimit = ci.GetMotorInfo(motorId).status.named.SoftMinusLimit;
		attr.set_value(&onLimit);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_SoftCwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute SoftCcwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_SoftCcwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_SoftCcwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_SoftCcwLimitFault) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SoftCcwLimitFault_read);

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		bool onLimit = ci.GetMotorInfo(motorId).status.named.SoftPlusLimit;
		attr.set_value(&onLimit);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_SoftCcwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute CwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_CwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_CwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_CwLimitFault) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		bool onLimit = ci.GetMotorInfo(motorId).status.named.MinusLimit;
		attr.set_value(&onLimit);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_CwLimitFault
}
//--------------------------------------------------------
/**
 *	Read attribute CcwLimitFault related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_Motor::read_CcwLimitFault(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_Motor::read_CcwLimitFault(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::read_CcwLimitFault) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		bool onLimit = ci.GetMotorInfo(motorId).status.named.PlusLimit;
		attr.set_value(&onLimit);
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::read_CcwLimitFault
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_Motor::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PhaseMotor related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_Motor::phase_motor()
{
	DEBUG_STREAM << "PowerPMAC_Motor::PhaseMotor()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::phase_motor) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::MotorPhase(motorId));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::phase_motor
}
//--------------------------------------------------------
/**
 *	Command HomeMotor related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_Motor::home_motor()
{
	DEBUG_STREAM << "PowerPMAC_Motor::HomeMotor()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::home_motor) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::MotorHome(motorId));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::home_motor
}
//--------------------------------------------------------
/**
 *	Command Calibrate related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void PowerPMAC_Motor::calibrate()
{
	DEBUG_STREAM << "PowerPMAC_Motor::Calibrate()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::calibrate) ENABLED START -----*/

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		ci.ExecuteCommand(ppmac::cmd::MotorZeroPosition(motorId));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::calibrate
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_Motor::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_Motor::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerPMAC_Motor::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerPMAC_Motor::namespace_ending) ENABLED START -----*/

//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Read attribute conversion_factor related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevFloat
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::read_conversion_factor(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::read_conversion_factor(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
// 	try {
// 		float conversion = ci.GetMotorInfo(motorId).conversion;
// 		attr.set_value(&conversion);
// 	}
// 	catch(ppmac::RuntimeError& e) {
// 		tu::TranslateException(e);
// 	}
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute conversion_factor related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevFloat
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::write_conversion_factor(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::write_conversion_factor(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevFloat	w_val;
// 	attr.get_write_value(w_val);
// 	ppmac::CoreInterface& ci = ppmac::GetCoreObject();
// 	try {
// 		auto cmd = ppmac::cmd::MotorSetConversion(w_val, motorId);
// 		ci.ExecuteCommand(fmt::to_string(cmd));
// 	}
// 	catch(ppmac::RuntimeError& e) {
// 		tu::TranslateException(e);
// 	}
// 	
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute invert_direction related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::read_invert_direction(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::read_invert_direction(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_invert_direction_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute invert_direction related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::write_invert_direction(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::write_invert_direction(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevBoolean	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute invert_encoder related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::read_invert_encoder(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::read_invert_encoder(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_invert_encoder_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute invert_encoder related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevBoolean
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void PowerPMAC_Motor::write_invert_encoder(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "PowerPMAC_Motor::write_invert_encoder(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevBoolean	w_val;
// 	attr.get_write_value(w_val);
// 	
// 	
// }


/*----- PROTECTED REGION END -----*/	//	PowerPMAC_Motor::namespace_ending
} //	namespace
