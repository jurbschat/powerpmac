/*----- PROTECTED REGION ID(PowerPMAC_IO.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_IO.cpp
//
// description : C++ source for the PowerPMAC_IO class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMAC_IO are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerPMAC_IO.h>
#include <PowerPMAC_IOClass.h>
#include "coreinterface.h"
#include "tangoutil.h"
#include "commandbuilder.h"


/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO.cpp

/**
 *  PowerPMAC_IO class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  RawValue     |  Tango::DevLong	Scalar
//  Value        |  Tango::DevDouble	Scalar
//  ScaleFactor  |  Tango::DevDouble	Scalar
//================================================================

namespace PowerPMAC_IO_ns
{
/*----- PROTECTED REGION ID(PowerPMAC_IO::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::PowerPMAC_IO()
 *	Description : Constructors for a Tango device
 *                implementing the classPowerPMAC_IO
 */
//--------------------------------------------------------
PowerPMAC_IO::PowerPMAC_IO(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::constructor_1
}
//--------------------------------------------------------
PowerPMAC_IO::PowerPMAC_IO(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::constructor_2
}
//--------------------------------------------------------
PowerPMAC_IO::PowerPMAC_IO(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMAC_IO::delete_device()
{
	DEBUG_STREAM << "PowerPMAC_IO::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::delete_device
	delete[] attr_RawValue_read;
	delete[] attr_Value_read;
	delete[] attr_ScaleFactor_read;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMAC_IO::init_device()
{
	DEBUG_STREAM << "PowerPMAC_IO::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_RawValue_read = new Tango::DevLong[1];
	attr_Value_read = new Tango::DevDouble[1];
	attr_ScaleFactor_read = new Tango::DevDouble[1];
	/*----- PROTECTED REGION ID(PowerPMAC_IO::init_device) ENABLED START -----*/

	*attr_RawValue_read = 0;
	*attr_Value_read = 0;
	*attr_ScaleFactor_read = 1;
	isWritable = false;
	analogScaleFactor = 0;

	static const std::map<std::string, std::tuple<bool, int32_t, int32_t>> portOptions = {
		{"ADC", {false, -32768, 32768}},
		{"GPIN", {false, 0, 1}},
		{"DAC", {true, -13380, 13380}},
		{"GPOUT", {true, 0, 1}}
	};

	bool optionFound = false;
	for(auto& option : portOptions) {
		auto it = port.find(option.first);
		if(it == 0) {
			isWritable = std::get<0>(option.second);
			analogScaleFactor = 1.f / std::abs(std::get<1>(option.second));
			optionFound = true;
			break;
		}
	}
	if(!optionFound) {
		auto error = fmt::format("{} is not a valid port identifier as it does not start with 'ADC', 'GPIN', 'DAC' or 'GPOUT'. see port property description", port);
		Tango::Except::throw_exception("invalid port", error.c_str(), "PowerPMAC_IO::init_device");
	}

	ppmac::CoreInterface& ci = ppmac::GetCoreObject();

	connectionEstablished = ci.GetSignalConnectionEstablished().connect([this](){
		set_state(Tango::ON);
	});

	connectionLost = ci.GetSignalConnectionLost().connect([this](){
		set_state(Tango::OFF);
	});

	if(ci.IsConnected()) {
		set_state(Tango::ON);
	} else {
		set_state(Tango::OFF);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PowerPMAC_IO::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Port"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMAC_IOClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMAC_IOClass	*ds_class =
			(static_cast<PowerPMAC_IOClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Port from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  port;
		else {
			//	Try to initialize Port from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  port;
		}
		//	And try to extract Port value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

	}

	/*----- PROTECTED REGION ID(PowerPMAC_IO::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMAC_IO::always_executed_hook()
{
	DEBUG_STREAM << "PowerPMAC_IO::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PowerPMAC_IO::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_IO::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PowerPMAC_IO::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PowerPMAC_IO::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute RawValue related method
 *	Description: raw values are in the range of -32768 to +32768 for ADC, -13380 to 13380 for DAC and 0, 1 for binary inputs/outputs
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::read_RawValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::read_RawValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::read_RawValue) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		std::string result = ci.ExecuteCommand(ppmac::cmd::ReadPortByName(port));
		auto rawValue = tu::ParseInt32(result);
		attr.set_value(&rawValue);
		*attr_RawValue_read = rawValue;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::read_RawValue
}
//--------------------------------------------------------
/**
 *	Write attribute RawValue related method
 *	Description: raw values are in the range of -32768 to +32768 for ADC, -13380 to 13380 for DAC and 0, 1 for binary inputs/outputs
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::write_RawValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::write_RawValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_IO::write_RawValue) ENABLED START -----*/

	if(!isWritable) {
		auto error = fmt::format("port {} is read only", port);
		Tango::Except::throw_exception("invalid command", error.c_str(), "PowerPMAC_IO::write_RawValue");
	}

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		std::string result = ci.ExecuteCommand(ppmac::cmd::WritePortByName(port, w_val));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::write_RawValue
}
//--------------------------------------------------------
/**
 *	Read attribute Value related method
 *	Description: the raw value from the controller will always be mapped to a -1, 1 intervall. 
 *               this can be changed to e.g. +-5 or +-10 via scaling if a specific range is desired
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::read_Value(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::read_Value(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::read_Value) ENABLED START -----*/
	//	Set the attribute value

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		std::string result = ci.ExecuteCommand(ppmac::cmd::ReadPortByName(port));
		auto rawValue = tu::ParseInt32(result);
		// e.g. 10000 * (1/32768) * 5
		double scaledValue = rawValue * analogScaleFactor * (*attr_ScaleFactor_read);
		attr.set_value(&scaledValue);
		*attr_Value_read = scaledValue;
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::read_Value
}
//--------------------------------------------------------
/**
 *	Write attribute Value related method
 *	Description: the raw value from the controller will always be mapped to a -1, 1 intervall. 
 *               this can be changed to e.g. +-5 or +-10 via scaling if a specific range is desired
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::write_Value(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::write_Value(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_IO::write_Value) ENABLED START -----*/

	if(!isWritable) {
		auto error = fmt::format("port {} is read only", port);
		Tango::Except::throw_exception("invalid command", error.c_str(), "PowerPMAC_IO::write_Value");
	}

	try {
		ppmac::CoreInterface& ci = ppmac::GetCoreObject();
		// e.g. 5 / 5 / (1/32768)
		int32_t rawValue = w_val / analogScaleFactor / (*attr_ScaleFactor_read);
		ci.ExecuteCommand(ppmac::cmd::WritePortByName(port, rawValue));
	} catch (ppmac::RuntimeError& e) {
		tu::TranslateException(e);
	}
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::write_Value
}
//--------------------------------------------------------
/**
 *	Read attribute ScaleFactor related method
 *	Description: the scale factor that will be applied to the value, 
 *               this mapps the -1, 1 interval into e.g. -5 to 5
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::read_ScaleFactor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::read_ScaleFactor(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMAC_IO::read_ScaleFactor) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ScaleFactor_read);
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::read_ScaleFactor
}
//--------------------------------------------------------
/**
 *	Write attribute ScaleFactor related method
 *	Description: the scale factor that will be applied to the value, 
 *               this mapps the -1, 1 interval into e.g. -5 to 5
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PowerPMAC_IO::write_ScaleFactor(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMAC_IO::write_ScaleFactor(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PowerPMAC_IO::write_ScaleFactor) ENABLED START -----*/

	*attr_ScaleFactor_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::write_ScaleFactor
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_IO::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMAC_IO::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PowerPMAC_IO::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PowerPMAC_IO::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PowerPMAC_IO::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_IO::namespace_ending
} //	namespace
