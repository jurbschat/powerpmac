//
// Created by urbschaj on 24.01.19.
//

#ifndef POWERPMAC_ENUMADAPT_H
#define POWERPMAC_ENUMADAPT_H

#include "defines.h"
#include "datastructures.h"
#include "motorunitshort.h"

#include <wise_enum.h>

WISE_ENUM_ADAPT(ppmac::MotorID,
		INVALID,
		Motor0,
		Motor1,
		Motor2,
		Motor3,
		Motor4,
		Motor5,
		Motor6,
		Motor7,
		Motor8,
		Motor9,
		Motor10,
		Motor11,
		Motor12,
		Motor13,
		Motor14,
		Motor15,
		Motor16,
		Motor17,
		Motor18,
		Motor19,
		Motor20,
		Motor21,
		Motor22,
		Motor23,
		Motor24,
		Motor25,
		Motor26,
		Motor27,
		Motor28,
		Motor29,
		Motor30,
		Motor31);

WISE_ENUM_ADAPT(ppmac::IoID,
		INVALID,
		Port0);

WISE_ENUM_ADAPT(ppmac::CoordID,
		INVALID,
		Coord0,
		Coord1,
		Coord2,
		Coord3,
		Coord4,
		Coord5,
		Coord6,
		Coord7,
		Coord8,
		Coord9,
		Coord10,
		Coord11,
		Coord12,
		Coord13,
		Coord14,
		Coord15,
		Coord16,
		Coord17,
		Coord18,
		Coord19,
		Coord20,
		Coord21,
		Coord22,
		Coord23,
		Coord24,
		Coord25,
		Coord26,
		Coord27,
		Coord28,
		Coord29,
		Coord30,
		Coord31);

WISE_ENUM_ADAPT(ppmac::CompensationTableID,
		INVALID,
		Table0,
		Table1,
		Table2,
		Table3,
		Table4,
		Table5,
		Table6,
		Table7,
		Table8,
		Table9,
		Table10,
		Table11,
		Table12,
		Table13,
		Table14,
		Table15,
		Table16,
		Table17,
		Table18,
		Table19,
		Table20,
		Table21,
		Table22,
		Table23,
		Table24,
		Table25,
		Table26,
		Table27,
		Table28,
		Table29,
		Table30,
		Table31);

WISE_ENUM_ADAPT(ppmac::MotorStatusBits::TYPE,
		(RESERVED_1_0, 0),
		(RESERVED_1_1, 1),
		(RESERVED_1_2, 2),
		(RESERVED_1_3, 3),
		(RESERVED_1_4, 4),
		(RESERVED_1_5, 5),
		(RESERVED_1_6, 6),
		(RESERVED_1_7, 7),
		(RESERVED_1_8, 8),
		(RESERVED_1_9, 9),
		(RESERVED_1_10, 10),
		(RESERVED_1_11, 11),
		(RESERVED_1_12, 12),
		(RESERVED_1_13, 13),
		(RESERVED_1_14, 14),
		(RESERVED_1_15, 15),
		(RESERVED_1_16, 16),
		(RESERVED_1_17, 17),
		(RESERVED_1_18, 18),
		(RESERVED_1_19, 19),
		(RESERVED_1_20, 20),
		(RESERVED_1_21, 21),
		(RESERVED_1_22, 22),
		(RESERVED_1_23, 23),
		(RESERVED_1_24, 24),
		(RESERVED_1_25, 25),
		(RESERVED_1_26, 26),
		(SoftLimitDir, 27),
		(BlDir, 28),
		(DacLimit, 29),
		(SoftLimit, 30),
		(Csolve, 31),
		(RESERVED_0_0, 32),
		(RESERVED_0_1, 33),
		(RESERVED_0_2, 34),
		(RESERVED_0_3, 35),
		(SpindleMotor0, 36),
		(SpindleMotor1, 37),
		(GantryHomed, 38),
		(TriggerSpeedSel, 39),
		(PhaseFound, 40),
		(BlockRequest, 41),
		(RESERVED_10, 42),
		(InPos, 43),
		(AmpEna, 44),
		(ClosedLoop, 45),
		(DestVelZero, 46),
		(HomeComplete, 47),
		(RESERVED_16, 48),
		(AuxFault, 49),
		(EncLoss, 50),
		(AmpWarn, 51),
		(TriggerNotFound, 52),
		(I2tFault, 53),
		(SoftPlusLimit, 54),
		(SoftMinusLimit, 55),
		(AmpFault, 56),
		(LimitStop, 57),
		(FeWarn, 58),
		(FeFatal, 59),
		(PlusLimit, 60),
		(MinusLimit, 61),
		(HomeInProgress, 62),
		(TriggerMove, 63)
		);
WISE_ENUM_ADAPT(ppmac::CoordStatusBits::TYPE,
		(AddedDwellDis, 0),
		(SharpCornerStop, 1),
		(CC3Active, 2),
		(EndDelayActive, 3),
		(CCMoveType0, 4),
		(CCMoveType1, 5),
		(CCOffReq, 6),
		(CCAddedArc, 7),
		(LHStatus, 8), // 8 bit wide
		(SegStopReq, 16),
		(SegEnabled, 17),
		(SegMoveDccel, 18),
		(SegMoveAccel, 19),
		(SegMove0, 20),
		(SegMove1, 21),
		(MoveMode0, 22),
		(MoveMode1, 23),
		(CCMode0, 24),
		(CCMode1, 25),
		(ContMotion, 26),
		(BlockAcive, 27),
		(FeedHold0, 28),
		(FeedHold1, 29),
		(LinToPvtBuf, 30),
		(Csolve, 31),
		(ErrorStatus, 32), // 8 bits wide
		(TimersEnabled, 40),
		(BlockRequest, 41),
		(RESERVED_10, 42),
		(InPos, 43),
		(AmpEna, 44),
		(ClosedLoop, 45),
		(DestVelZero, 46),
		(HomeComplete, 47),
		(TimerEnabled, 48),
		(AuxFault, 49),
		(EncLoss, 50),
		(AmpWarn, 51),
		(TriggerNotFound, 52),
		(I2tFault, 53),
		(SoftPlusLimit, 54),
		(SoftMinusLimit, 55),
		(AmpFault, 56),
		(LimitStop, 57),
		(FeFatal, 58),
		(FeWarn, 59),
		(PlusLimit, 60),
		(MinusLimit, 61),
		(HomeInProgress, 62),
		(TriggerMove, 63)
		);

WISE_ENUM_ADAPT(ppmac::MotorUnit,
		None,
		FeedbackUnit,
		Meter,
		Millimeter,
		MicroMeter,
		NanoMeter,
		PicoMeter,
		Inch,
		Mil,
		Revolution,
		Radian,
		Degree,
		Gradian,
		ArcMinute,
		ArcSecond,
		Reserved);


WISE_ENUM_ADAPT(ppmac::MotorUnitShort,
		None,
		ct,
		m,
		mm,
		um,
		nm,
		pm,
		in,
		mil,
		rev,
		rad,
		deg,
		grad,
		arcm,
		arcs,
		Reserved);

#endif //POWERPMAC_ENUMADAPT_H
