/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::DynAttrUtils.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMAC_CoordinateSystemsDynAttrUtils.cpp
//
// description : Dynamic attributes utilities file for the PowerPMAC_CoordinateSystems class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PowerPMAC_CoordinateSystems.h>
#include <PowerPMAC_CoordinateSystemsClass.h>

/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::DynAttrUtils.cpp

//================================================================
//  Attributes managed are:
//================================================================
//  X  |  Tango::DevDouble	Scalar
//  Y  |  Tango::DevDouble	Scalar
//  Z  |  Tango::DevDouble	Scalar
//  W  |  Tango::DevDouble	Scalar
//================================================================

//	For compatibility reason, this file (PowerPMAC_CoordinateSystemsDynAttrUtils)
//	manage also the dynamic command utilities.
//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//================================================================

namespace PowerPMAC_CoordinateSystems_ns
{
//=============================================================
//	Add/Remove dynamic attribute methods
//=============================================================

//--------------------------------------------------------
/**
 *	Add a X dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::add_X_dynamic_attribute(string attname)
{
	//	Attribute : X
	XAttrib	*x = new XAttrib(attname);
	Tango::UserDefaultAttrProp	x_prop;
	//	description	not set for X
	//	label	not set for X
	//	unit	not set for X
	//	standard_unit	not set for X
	//	display_unit	not set for X
	//	format	not set for X
	//	max_value	not set for X
	//	min_value	not set for X
	//	max_alarm	not set for X
	//	min_alarm	not set for X
	//	max_warning	not set for X
	//	min_warning	not set for X
	//	delta_t	not set for X
	//	delta_val	not set for X
	
	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::att_X_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::att_X_dynamic_attribute
	x->set_default_properties(x_prop);
	//	Not Polled
	x->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	X_data.insert(make_pair(attname, 0.0));
	add_attribute(x);
}
//--------------------------------------------------------
/**
 *	remove a X dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::remove_X_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=X_data.find(attname))!=X_data.end())
    {
    	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::remove_X_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::remove_X_dynamic_attribute
		X_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a Y dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::add_Y_dynamic_attribute(string attname)
{
	//	Attribute : Y
	YAttrib	*y = new YAttrib(attname);
	Tango::UserDefaultAttrProp	y_prop;
	//	description	not set for Y
	//	label	not set for Y
	//	unit	not set for Y
	//	standard_unit	not set for Y
	//	display_unit	not set for Y
	//	format	not set for Y
	//	max_value	not set for Y
	//	min_value	not set for Y
	//	max_alarm	not set for Y
	//	min_alarm	not set for Y
	//	max_warning	not set for Y
	//	min_warning	not set for Y
	//	delta_t	not set for Y
	//	delta_val	not set for Y
	
	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::att_Y_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::att_Y_dynamic_attribute
	y->set_default_properties(y_prop);
	//	Not Polled
	y->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	Y_data.insert(make_pair(attname, 0.0));
	add_attribute(y);
}
//--------------------------------------------------------
/**
 *	remove a Y dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::remove_Y_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=Y_data.find(attname))!=Y_data.end())
    {
    	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::remove_Y_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::remove_Y_dynamic_attribute
		Y_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a Z dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::add_Z_dynamic_attribute(string attname)
{
	//	Attribute : Z
	ZAttrib	*z = new ZAttrib(attname);
	Tango::UserDefaultAttrProp	z_prop;
	//	description	not set for Z
	//	label	not set for Z
	//	unit	not set for Z
	//	standard_unit	not set for Z
	//	display_unit	not set for Z
	//	format	not set for Z
	//	max_value	not set for Z
	//	min_value	not set for Z
	//	max_alarm	not set for Z
	//	min_alarm	not set for Z
	//	max_warning	not set for Z
	//	min_warning	not set for Z
	//	delta_t	not set for Z
	//	delta_val	not set for Z
	
	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::att_Z_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::att_Z_dynamic_attribute
	z->set_default_properties(z_prop);
	//	Not Polled
	z->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	Z_data.insert(make_pair(attname, 0.0));
	add_attribute(z);
}
//--------------------------------------------------------
/**
 *	remove a Z dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::remove_Z_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=Z_data.find(attname))!=Z_data.end())
    {
    	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::remove_Z_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::remove_Z_dynamic_attribute
		Z_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a W dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::add_W_dynamic_attribute(string attname)
{
	//	Attribute : W
	WAttrib	*w = new WAttrib(attname);
	Tango::UserDefaultAttrProp	w_prop;
	//	description	not set for W
	//	label	not set for W
	//	unit	not set for W
	//	standard_unit	not set for W
	//	display_unit	not set for W
	//	format	not set for W
	//	max_value	not set for W
	//	min_value	not set for W
	//	max_alarm	not set for W
	//	min_alarm	not set for W
	//	max_warning	not set for W
	//	min_warning	not set for W
	//	delta_t	not set for W
	//	delta_val	not set for W
	
	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::att_W_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::att_W_dynamic_attribute
	w->set_default_properties(w_prop);
	//	Not Polled
	w->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	W_data.insert(make_pair(attname, 0.0));
	add_attribute(w);
}
//--------------------------------------------------------
/**
 *	remove a W dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void PowerPMAC_CoordinateSystems::remove_W_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=W_data.find(attname))!=W_data.end())
    {
    	/*----- PROTECTED REGION ID(PowerPMAC_CoordinateSystems::remove_W_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	PowerPMAC_CoordinateSystems::remove_W_dynamic_attribute
		W_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on X data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *PowerPMAC_CoordinateSystems::get_X_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=X_data.find(name))==X_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"PowerPMAC_CoordinateSystems::get_X_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on Y data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *PowerPMAC_CoordinateSystems::get_Y_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=Y_data.find(name))==Y_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"PowerPMAC_CoordinateSystems::get_Y_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on Z data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *PowerPMAC_CoordinateSystems::get_Z_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=Z_data.find(name))==Z_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"PowerPMAC_CoordinateSystems::get_Z_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on W data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *PowerPMAC_CoordinateSystems::get_W_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=W_data.find(name))==W_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"PowerPMAC_CoordinateSystems::get_W_data_ptr()");
    }
	return  &(ite->second);
}


//=============================================================
//	Add/Remove dynamic command methods
//=============================================================


} //	namespace
