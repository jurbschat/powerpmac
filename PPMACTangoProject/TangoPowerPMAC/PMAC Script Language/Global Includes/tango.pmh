//
// beware! :D
//
// if these values need to be expanded to use e.g. a macro ring, they must always start with 
// ADC, DAC, GPIN or GPOUT to allow the correct write and scaling attributes to be used
// e.g. GPOUT1X15M1 or GPOUTM11X15 etc.
// 

// PBUM page 77
PTR ADC1X9 ->S.IO:$900028.16.16; // ADC1 X9 [Counts] // Gate3[i].Chan[n].AdcAmp[2] // read the upper 16 bits
PTR ADC2X9 ->S.IO:$9000A8.16.16; // ADC2 X9 [Counts]
PTR ADC1X10->S.IO:$900128.16.16; // ADC1 X10 [Counts]
PTR ADC2X10->S.IO:$9001A8.16.16; // ADC2 X10 [Counts]
PTR ADC1X11->S.IO:$904028.16.16; // ADC1 X11 [Counts]
PTR ADC2X11->S.IO:$9040A8.16.16; // ADC2 X11 [Counts]
PTR ADC1X12->S.IO:$904128.16.16; // ADC1 X12 [Counts]
PTR ADC2X12->S.IO:$9041A8.16.16; // ADC2 X12 [Counts]

// PBUM page 80
Gate3[0].Chan[0].OutputMode = Gate3[0].Chan[0].OutputMode & $7 // D phase PWM
Gate3[0].Chan[1].OutputMode = Gate3[0].Chan[1].OutputMode & $7 // D phase PWM
Gate3[0].Chan[2].OutputMode = Gate3[0].Chan[2].OutputMode & $7 // D phase PWM
Gate3[0].Chan[3].OutputMode = Gate3[0].Chan[3].OutputMode & $7 // D phase PWM
Gate3[1].Chan[0].OutputMode = Gate3[1].Chan[0].OutputMode & $7 // D phase PWM
Gate3[1].Chan[1].OutputMode = Gate3[1].Chan[1].OutputMode & $7 // D phase PWM
Gate3[1].Chan[2].OutputMode = Gate3[1].Chan[2].OutputMode & $7 // D phase PWM
Gate3[1].Chan[3].OutputMode = Gate3[1].Chan[3].OutputMode & $7 // D phase PWM

PTR DAC1X9-> S.IO:$90004C.16.16; // DAC Channel 1, X9 [Counts] // Gate3[i].Chan[n].Pwm[3] wite the upper 16 bits with 14 valid bits
PTR DAC2X9-> S.IO:$9000CC.16.16; // DAC Channel 2, X9 [Counts]
PTR DAC1X10->S.IO:$90014C.16.16; // DAC Channel 1, X10 [Counts]
PTR DAC2X10->S.IO:$9001CC.16.16; // DAC Channel 2, X10 [Counts]

PTR DAC1X11->S.IO:$90404C.16.16; // DAC Channel 1, X11 [Counts]
PTR DAC2X11->S.IO:$9040CC.16.16; // DAC Channel 2, X11 [Counts]
PTR DAC1X12->S.IO:$90414C.16.16; // DAC Channel 1, X12 [Counts]
PTR DAC2X12->S.IO:$9041CC.16.16; // DAC Channel 2, X12 [Counts]

// PBUM page 85
PTR GPIN1X9 ->Gate3[0].Chan[0].T; // Channel 1, X9 Input
PTR GPIN2X9 ->Gate3[0].Chan[1].T; // Channel 2, X9 Input
PTR GPIN1X10->Gate3[0].Chan[2].T; // Channel 1, X10 Input
PTR GPIN2X10->Gate3[0].Chan[3].T; // Channel 2, X10 Input
PTR GPIN1X11->Gate3[1].Chan[0].T; // Channel 1, X11 Input
PTR GPIN2X11->Gate3[1].Chan[1].T; // Channel 2, X11 Input
PTR GPIN1X12->Gate3[1].Chan[2].T; // Channel 1, X12 Input
PTR GPIN2X12->Gate3[1].Chan[3].T; // Channel 2, X12 Input

// PBUM page 95
PTR GPIN1X15 ->Gate3[0].GpioData[0].0.1;  // Input #1, X15 Pin#1
PTR GPIN2X15 ->Gate3[0].GpioData[0].1.1;  // Input #2, X15 Pin#20
PTR GPIN3X15 ->Gate3[0].GpioData[0].2.1;  // Input #3, X15 Pin#2
PTR GPIN4X15 ->Gate3[0].GpioData[0].3.1;  // Input #4, X15 Pin#21
PTR GPIN5X15 ->Gate3[0].GpioData[0].4.1;  // Input #5, X15 Pin#3
PTR GPIN6X15 ->Gate3[0].GpioData[0].5.1;  // Input #6, X15 Pin#22
PTR GPIN7X15 ->Gate3[0].GpioData[0].6.1;  // Input #7, X15 Pin#4
PTR GPIN8X15 ->Gate3[0].GpioData[0].7.1;  // Input #8, X15 Pin#23
PTR GPIN9X15 ->Gate3[0].GpioData[0].8.1;  // Input #9, X15 Pin#5
PTR GPIN10X15->Gate3[0].GpioData[0].9.1;  // Input #10,X15 Pin#24
PTR GPIN11X15->Gate3[0].GpioData[0].10.1; // Input #11,X15 Pin#6
PTR GPIN12X15->Gate3[0].GpioData[0].11.1; // Input #12,X15 Pin#25
PTR GPIN13X15->Gate3[0].GpioData[0].12.1; // Input #13,X15 Pin#7
PTR GPIN14X15->Gate3[0].GpioData[0].13.1; // Input #14,X15 Pin#26
PTR GPIN15X15->Gate3[0].GpioData[0].14.1; // Input #15,X15 Pin#8
PTR GPIN16X15->Gate3[0].GpioData[0].15.1; // Input #16,X15 Pin#27
PTR GPIN1X16 ->Gate3[1].GpioData[0].0.1;  // Input #17,X16 Pin#1
PTR GPIN2X16 ->Gate3[1].GpioData[0].1.1;  // Input #18,X16 Pin#20
PTR GPIN3X16 ->Gate3[1].GpioData[0].2.1;  // Input #19,X16 Pin#2
PTR GPIN4X16 ->Gate3[1].GpioData[0].3.1;  // Input #20,X16 Pin#21
PTR GPIN5X16 ->Gate3[1].GpioData[0].4.1;  // Input #21,X16 Pin#3
PTR GPIN6X16 ->Gate3[1].GpioData[0].5.1;  // Input #22,X16 Pin#22
PTR GPIN7X16 ->Gate3[1].GpioData[0].6.1;  // Input #23,X16 Pin#4
PTR GPIN8X16 ->Gate3[1].GpioData[0].7.1;  // Input #24,X16 Pin#23
PTR GPIN9X16 ->Gate3[1].GpioData[0].8.1;  // Input #25,X16 Pin#5
PTR GPIN10X16->Gate3[1].GpioData[0].9.1;  // Input #26,X16 Pin#24
PTR GPIN11X16->Gate3[1].GpioData[0].10.1; // Input #27,X16 Pin#6
PTR GPIN12X16->Gate3[1].GpioData[0].11.1; // Input #28,X16 Pin#25
PTR GPIN13X16->Gate3[1].GpioData[0].12.1; // Input #29,X16 Pin#7
PTR GPIN14X16->Gate3[1].GpioData[0].13.1; // Input #30,X16 Pin#26
PTR GPIN15X16->Gate3[1].GpioData[0].14.1; // Input #31,X16 Pin#8
PTR GPIN16X16->Gate3[1].GpioData[0].15.1; // Input #32,X16 Pin#27

//															Sourcing	Sinking
PTR GPOUT1X15->Gate3[0].GpioData[0].16.1; // Output #1,X15	Pin#12		Pin#30
PTR GPOUT2X15->Gate3[0].GpioData[0].17.1; // Output #2,X15	Pin#13		Pin#31
PTR GPOUT3X15->Gate3[0].GpioData[0].18.1; // Output #3,X15	Pin#14		Pin#32
PTR GPOUT4X15->Gate3[0].GpioData[0].19.1; // Output #4,X15	Pin#15		Pin#33
PTR GPOUT5X15->Gate3[0].GpioData[0].20.1; // Output #5,X15	Pin#16		Pin#34
PTR GPOUT6X15->Gate3[0].GpioData[0].21.1; // Output #6,X15	Pin#17		Pin#35
PTR GPOUT7X15->Gate3[0].GpioData[0].22.1; // Output #7,X15	Pin#18		Pin#36
PTR GPOUT8X15->Gate3[0].GpioData[0].23.1; // Output #8,X15	Pin#19		Pin#37
PTR GPOUT1X16->Gate3[1].GpioData[0].16.1; // Output #9, X16	Pin#12		Pin#30
PTR GPOUT2X16->Gate3[1].GpioData[0].17.1; // Output #10,X16 Pin#13		Pin#31
PTR GPOUT3X16->Gate3[1].GpioData[0].18.1; // Output #11,X16 Pin#14		Pin#32
PTR GPOUT4X16->Gate3[1].GpioData[0].19.1; // Output #12,X16 Pin#15		Pin#33
PTR GPOUT5X16->Gate3[1].GpioData[0].20.1; // Output #13,X16 Pin#16		Pin#34
PTR GPOUT6X16->Gate3[1].GpioData[0].21.1; // Output #14,X16 Pin#17		Pin#35
PTR GPOUT7X16->Gate3[1].GpioData[0].22.1; // Output #15,X16 Pin#18		Pin#36
PTR GPOUT8X16->Gate3[1].GpioData[0].23.1; // Output #16,X16 Pin#19		Pin#37

//
// these addresses are used to allow simple moves inside a coordinate system.
// we have a motion program that moves to the desired position. as we are not able
// to somply move inside a coordinate system, this motion program gets its positions
// from these memory addresses which can be set via the gpascii interface
//

GLOBAL PLCMOVEX = 100;
GLOBAL PLCMOVEY = 100;
GLOBAL PLCMOVEZ = 100;